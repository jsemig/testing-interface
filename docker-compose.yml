version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: chat-mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    networks:
      - chat-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://root:example@localhost:27017/admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Express web-based interface
  mongo-express:
    image: mongo-express:latest
    container_name: chat-mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongodb:27017/
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - chat-network

  # Python FastAPI backend service
  backend:
    build: ./backend
    container_name: chat-backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://root:example@mongodb:27017/
      - MONGO_DATABASE=chat_db
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # React frontend service
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chat-frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_started
    networks:
      - chat-network

networks:
  chat-network:
    driver: bridge

volumes:
  mongodb_data: 